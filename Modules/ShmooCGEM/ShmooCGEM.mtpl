
Version 1.0;

ProgramStyle = Modular;

TestPlan ShmooCGEM;

##								   Shmoo CGEM								##
## -------------------------------------------------------------------------##

Test DecisionNode NoOperation
{
	DefaultDecisionExitPort = 1 ;
	Timeout = "0:00:30";
}

Test MarionetteExecuteContent Shmoo_ExecuteDragonTest_SSF
{
	Timeout = ContentExecutionSetupVars.Timeout;
	#ContentGroup =  IACore_Wc_limiters;
	ContentGroup = ContentExecutionSetupVars.ContentGroupName;
    BootStage = ContentExecutionSetupVars.BootStage;
	Transport = MarionetteSerialTransport { ComPort = SerialPortSetupVars.ComPortNumber; };
    ContentGroupExecutionMode = ShmooMode
	{
		MaxNumberOfTestRuns = ContentExecutionSetupVars.MaxNumberOfTestRuns;
		RequiredNumberOfPasses = ContentExecutionSetupVars.RequiredNumberOfPasses;
		MaxAllowedFailures = ContentExecutionSetupVars.MaxAllowedFailures;
		MaxAllowedConsecutiveFailures = ContentExecutionSetupVars.MaxAllowedConsecutiveFailures;
		ExperimentName = ShmooExperimentSetup.ShmooExperimentName;
		Domain =  ShmooExperimentSetup.ShmooDomainName;
		SaveShmooLimitersTo = ShmooParam.ShmooLimiterDestination;
		Limiters = {
			IsEnabled = ShmooParam.IsPostScrubEnabled;
			InputLimiters = SearchParam.SearchLimiters; };
		Vfcurve = { 
			Voltage = VfCurveSetupVars.VoltageName; 
			Frequency = VfCurveSetupVars.FrequencyName;
			};
		#ShmooAxes =  ShmooAxes.VparallelPcodeVoltageSetFlow;
		ShmooAxes =  ShmooAxesSetupVars.IACoreShmooAxes;
	};  
	
    EnablePostFailActions = PostActionsSetupVars.PostFail;
    EnablePostPassActions = PostActionsSetupVars.PostPass;
	VvarRegex = ContentExecutionSetupVars.VvarRegex;
}

Flow Shmoo
{
	FlowItem RunShmooSSF Shmoo_ExecuteDragonTest_SSF
	{
		Result -2 { Property PassFail = "Fail"; Return -2; }
		Result -1 { Property PassFail = "Fail"; Return -1; }
		Result 0 { Property PassFail = "Fail"; Return 0; }
		Result 1 { Property PassFail = "Pass"; Return 1; }

		## Post Fail Action
		Result 2 
		{
			Property PassFail = "Fail"; 
			Call PostPassFailActionsFlow;
		}

		# Post Pass Action
		Result 3
		{
			Property PassFail = "Pass";
			Call PostPassFailActionsFlow;
		}


		## 1st Axis and 2nd Axis Setup: Setting up AVX Mode and Frequency (Required boot - using same setup flow)
		# in thisSetup flow, it will boot the platform, and setup AVX followed by Frequency.
		Result  20 { 
			Property PassFail = "Pass";
			Call SetupAVXFrequency;}  
			
		#Result  21 { 
		#	Property PassFail = "Pass";
		#	Call SetupFrequency;}  

		## 3rd Axis Setup: Setting up Temperature
		Result  23 { 
			Property PassFail = "Pass"; 
			Call SetupTemperature;}   

		Result  25 { 
			Property PassFail = "Pass";
			Call SetCoreVoltageFlow;}

	}

	FlowItem SetupAVXFrequency SetupAVXFrequency
	{
		Result -2 { Property PassFail = "Fail"; Back -2; }
		Result -1 { Property PassFail = "Fail"; Back -1; }
		Result 0 { Property PassFail = "Fail"; Back 0; }
		Result 1 { Property PassFail = "Pass"; Back 1; }
	}
	


	FlowItem SetupTemperature Temperature::TemperatureFlow
	{
		Result -2 { Property PassFail = "Fail"; Set TemperatureVars.AxisPointSetup = False; Back -2; }
		Result -1 { Property PassFail = "Fail"; Set TemperatureVars.AxisPointSetup = False; Back -1; }
		Result 0 { Property PassFail = "Fail"; Set TemperatureVars.AxisPointSetup = False; Back 0; }
		Result 1 { Property PassFail = "Pass"; Set TemperatureVars.AxisPointSetup = True; Back 1; }
	}

	FlowItem SetCoreVoltageFlow CoreVoltage::SetCoreVoltageFlow
	{
		Result -2 { Property PassFail = "Fail"; Set VoltageVars.AxisPointSetup = False; Back -2; }
		Result -1 { Property PassFail = "Fail"; Set VoltageVars.AxisPointSetup = False; Back -1; }
		Result 0 { Property PassFail = "Fail"; Set VoltageVars.AxisPointSetup = False; Back 0; }
		Result 1 { Property PassFail = "Pass"; Set VoltageVars.AxisPointSetup = True; Set DecisionNode.RebootAndReapplySetup = False; Back 1; }
	}

	FlowItem PostPassFailActionsFlow FailureRecovery::PostPassFailActionsFlow
	{
		Result -2 { Property PassFail = "Fail"; Back -2; }
		Result -1 { Property PassFail = "Fail"; Back -1; }
		Result 0 { Property PassFail = "Fail"; Back 0; }
		Result 1 { Property PassFail = "Pass"; Back 1; }
	}
}


Flow SetupAVXFrequency
{
    FlowItem RebootAndReapply NoOperation
	{
		Result -1 { Property PassFail = "Fail"; Return -1; }
		Result 0 { Property PassFail = "Fail"; Return 0; }
		Result 1 {
			Property PassFail = "Pass";
			SmartExitPort => DecisionNode.RebootAndReapplySetup == True;
			Set AVXModeVars.AxisPointSetup = True;
			Set FrequencyVars.AxisPointSetup = True;
			Return 1; }
		Result 2 { 
			Property PassFail = "Pass"; 
			SmartExitPort => DecisionNode.RebootAndReapplySetup == False;
			
	        GoTo BootFromPowerOffToEfi;
		}
	}
	FlowItem BootFromPowerOffToEfi BootStageTransitions::BootFlow_WithRetries
	{
		Result -2 { Property PassFail = "Fail"; Return -2; }
		Result -1 { Property PassFail = "Fail"; Return -1; }
		Result 0 { Property PassFail = "Fail"; Return 0; }
		Result 1 { Property PassFail = "Pass"; GoTo SetupAVXMode; }
	}

	FlowItem SetupAVXMode AvxMode::SetAVXModeFlow
	{
		Result -2 { Property PassFail = "Fail"; Set AVXModeVars.AxisPointSetup = False; Return -2; }
		Result -1 { Property PassFail = "Fail"; Set AVXModeVars.AxisPointSetup = False; Return -1; }
		Result 0 { Property PassFail = "Fail"; Set AVXModeVars.AxisPointSetup = False; Return 0; }
		Result 1 { Property PassFail = "Pass"; Set AVXModeVars.AxisPointSetup = True; GoTo SetupFrequency; }
	}

	FlowItem SetupFrequency SearchRatioFlow::SetCoreRatioFlow
	{
		Result -2 { Property PassFail = "Fail"; Set FrequencyVars.AxisPointSetup = False; Return -2; }
		Result -1 { Property PassFail = "Fail"; Set FrequencyVars.AxisPointSetup = False; Return -1; }
		Result 0 { Property PassFail = "Fail"; Set FrequencyVars.AxisPointSetup = False; Return 0; }
		Result 1 { Property PassFail = "Pass"; Set FrequencyVars.AxisPointSetup = True; Return 1; }
	}
}

